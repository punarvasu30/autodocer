package com.autodocer;

import com.autodocer.DTO.ControllerInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;

import java.util.List;

/**
 * Responsible for converting the parsed API information into a valid
 * OpenAPI 3.0 JSON specification.
 */
public class OpenApiGenerator {

    private final ObjectMapper objectMapper;

    public OpenApiGenerator() {
        // ObjectMapper is the main class from the Jackson library for working with JSON
        this.objectMapper = new ObjectMapper();
    }

    /**
     * Generates the OpenAPI JSON string.
     * @param apiInfo The structured list of controller information from the DocumentationParser.
     * @return A string containing the OpenAPI 3.0 specification in JSON format.
     */
    public String generate(List<ControllerInfo> apiInfo) {
        // Create the root of the JSON document
        ObjectNode root = objectMapper.createObjectNode();

        // 1. Add basic OpenAPI info
        root.put("openapi", "3.0.0");
        ObjectNode infoNode = root.putObject("info");
        infoNode.put("title", "Auto-Generated API Documentation");
        infoNode.put("version", "1.0.0");
        infoNode.put("description", "Generated by AutoDocER");

        // 2. Create the 'paths' object (this is where all the endpoints will go)
        ObjectNode pathsNode = root.putObject("paths");

        // TODO: In the next step, we will loop through 'apiInfo' here
        // and add all the endpoint details to the 'pathsNode'.

        // 3. Convert the JSON object to a pretty-printed string
        try {
            return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(root);
        } catch (Exception e) {
            e.printStackTrace();
            return "{\"error\": \"Could not generate OpenAPI spec\"}";
        }
    }
}
